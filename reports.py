#!/usr/bin/env python3
"""
Detective Joe v1.5 - Report Generators
TXT, HTML, and JSON report generation with artifact attachments.
"""

import json
import html
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional
import logging


class ReportGenerator:
    """Base class for report generators."""
    
    def __init__(self, reports_dir: Path):
        """
        Initialize report generator.
        
        Args:
            reports_dir: Directory to save reports
        """
        self.reports_dir = Path(reports_dir)
        self.reports_dir.mkdir(exist_ok=True)
        self.logger = logging.getLogger("dj.reports")
    
    def generate_filename(self, target: str, format_ext: str, category: str = None) -> str:
        """Generate timestamped report filename."""
        clean_target = "".join(c for c in target if c.isalnum() or c in ".-_")
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        
        if category:
            return f"{clean_target}_{category}_{timestamp}.{format_ext}"
        else:
            return f"{clean_target}_{timestamp}.{format_ext}"


class TxtReportGenerator(ReportGenerator):
    """Text report generator (enhanced)."""
    
    def generate(self, investigation_result: Dict[str, Any], artifacts: List[Any] = None) -> str:
        """Generate enhanced TXT report."""
        content = f"""DETECTIVE JOE v1.5 INVESTIGATION REPORT
=======================================
Investigation Type: {investigation_result.get('investigation_type', 'Unknown')}
Target: {investigation_result.get('target', 'Unknown')}
Category: {investigation_result.get('category', 'Unknown')}
Profile: {investigation_result.get('profile', 'Unknown')}
Date: {investigation_result.get('timestamp', 'Unknown')}
=======================================

EXECUTIVE SUMMARY
-----------------
"""
        
        summary = investigation_result.get('summary', {})
        content += f"Total Tasks Executed: {summary.get('total_tasks', 0)}\n"
        content += f"Successful Tasks: {summary.get('successful_tasks', 0)}\n"
        content += f"Failed Tasks: {summary.get('failed_tasks', 0)}\n"
        content += f"Success Rate: {summary.get('success_rate', 0):.1f}%\n"
        content += f"Total Execution Time: {summary.get('total_duration', 0):.2f} seconds\n\n"
        
        # Artifacts summary
        if artifacts:
            content += "ARTIFACTS DISCOVERED\n"
            content += "-" * 20 + "\n"
            artifact_summary = self._summarize_artifacts(artifacts)
            for artifact_type, count in artifact_summary.items():
                content += f"{artifact_type.title()}: {count}\n"
            content += "\n"
        
        # Plugin results
        plugin_results = investigation_result.get('plugin_results', {})
        for task_id, result in plugin_results.items():
            plugin_name = result.get('plugin', 'Unknown')
            status = result.get('status', 'Unknown')
            duration = result.get('duration', 0)
            
            content += f"\n[{plugin_name.upper()}] - Status: {status.upper()}\n"
            content += "=" * 50 + "\n"
            
            if status == "completed" and result.get('result'):
                plugin_result = result['result']
                
                # Add command executed
                if 'command' in plugin_result:
                    content += f"Command: {plugin_result['command']}\n\n"
                
                # Add parsed data if available
                if 'parsed_data' in plugin_result:
                    parsed = plugin_result['parsed_data']
                    content += "STRUCTURED DATA:\n"
                    content += "-" * 20 + "\n"
                    content += self._format_parsed_data(parsed)
                
                # Add raw output (truncated)
                if 'stdout' in plugin_result and plugin_result['stdout']:
                    content += "\nRAW OUTPUT (PREVIEW):\n"
                    content += "-" * 20 + "\n"
                    content += plugin_result['stdout'][:2000]  # Limit output size
                    if len(plugin_result['stdout']) > 2000:
                        content += "\n[OUTPUT TRUNCATED - Full output available in other formats]"
            
            elif result.get('error'):
                content += f"Error: {result['error']}\n"
            
            content += f"\nExecution Time: {duration:.2f} seconds\n\n"
        
        # Detailed artifacts section
        if artifacts:
            content += "\n" + "=" * 50 + "\n"
            content += "DETAILED ARTIFACTS\n"
            content += "=" * 50 + "\n"
            content += self._format_artifacts_detailed(artifacts)
        
        content += "\n" + "=" * 50 + "\n"
        content += "Report generated by Detective Joe v1.5\n"
        content += f"Framework: Async execution with {summary.get('total_tasks', 0)} parallel tasks\n"
        
        return content
    
    def _summarize_artifacts(self, artifacts: List[Any]) -> Dict[str, int]:
        """Create artifact summary by type."""
        summary = {}
        for artifact in artifacts:
            artifact_type = artifact.type if hasattr(artifact, 'type') else 'unknown'
            summary[artifact_type] = summary.get(artifact_type, 0) + 1
        return summary
    
    def _format_parsed_data(self, parsed_data: Dict[str, Any]) -> str:
        """Format parsed plugin data for report display."""
        content = ""
        
        for key, value in parsed_data.items():
            if key == "summary":
                continue
                
            content += f"{key.upper()}:\n"
            
            if isinstance(value, list):
                if value:
                    for item in value[:20]:  # Limit list items
                        content += f"  - {item}\n"
                    if len(value) > 20:
                        content += f"  ... and {len(value) - 20} more items\n"
                else:
                    content += "  (none found)\n"
                    
            elif isinstance(value, dict):
                for sub_key, sub_value in value.items():
                    content += f"  {sub_key}: {sub_value}\n"
                    
            else:
                content += f"  {value}\n"
            
            content += "\n"
        
        return content
    
    def _format_artifacts_detailed(self, artifacts: List[Any]) -> str:
        """Format detailed artifacts section."""
        content = ""
        
        # Group artifacts by type
        by_type = {}
        for artifact in artifacts:
            artifact_type = artifact.type if hasattr(artifact, 'type') else 'unknown'
            if artifact_type not in by_type:
                by_type[artifact_type] = []
            by_type[artifact_type].append(artifact)
        
        for artifact_type, type_artifacts in by_type.items():
            content += f"\n{artifact_type.upper()} ARTIFACTS:\n"
            content += "-" * 30 + "\n"
            
            for artifact in type_artifacts[:50]:  # Limit artifacts per type
                content += f"Value: {artifact.value}\n"
                content += f"Source: {artifact.source_plugin}\n"
                content += f"Confidence: {artifact.confidence:.2f}\n"
                if artifact.tags:
                    content += f"Tags: {', '.join(artifact.tags)}\n"
                if artifact.metadata:
                    content += f"Metadata: {json.dumps(artifact.metadata, indent=2)}\n"
                content += "\n"
            
            if len(type_artifacts) > 50:
                content += f"... and {len(type_artifacts) - 50} more {artifact_type} artifacts\n\n"
        
        return content


class HtmlReportGenerator(ReportGenerator):
    """HTML report generator with styling."""
    
    def generate(self, investigation_result: Dict[str, Any], artifacts: List[Any] = None) -> str:
        """Generate HTML report."""
        template = self._get_html_template()
        
        # Prepare data for template
        context = {
            'title': f"Detective Joe Investigation Report",
            'investigation_type': investigation_result.get('investigation_type', 'Unknown'),
            'target': html.escape(investigation_result.get('target', 'Unknown')),
            'category': investigation_result.get('category', 'Unknown'),
            'profile': investigation_result.get('profile', 'Unknown'),
            'timestamp': investigation_result.get('timestamp', 'Unknown'),
            'summary': investigation_result.get('summary', {}),
            'plugin_results': investigation_result.get('plugin_results', {}),
            'artifacts': artifacts or [],
            'artifacts_summary': self._summarize_artifacts(artifacts) if artifacts else {}
        }
        
        return template.format(**context, **self._get_html_sections(context))
    
    def _get_html_template(self) -> str:
        """Get HTML template."""
        return """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #3498db;
        }}
        .header h1 {{
            color: #2c3e50;
            margin: 0;
        }}
        .metadata {{
            background: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }}
        .summary {{
            background: #e8f5e8;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }}
        .plugin-result {{
            margin-bottom: 25px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }}
        .plugin-result.success {{
            border-left: 4px solid #27ae60;
        }}
        .plugin-result.failed {{
            border-left: 4px solid #e74c3c;
        }}
        .plugin-result.timeout {{
            border-left: 4px solid #f39c12;
        }}
        .plugin-header {{
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 10px;
            color: #2c3e50;
        }}
        .command {{
            background: #2c3e50;
            color: white;
            padding: 10px;
            border-radius: 3px;
            font-family: monospace;
            margin: 10px 0;
        }}
        .artifacts {{
            margin-top: 30px;
        }}
        .artifact-type {{
            margin-bottom: 20px;
        }}
        .artifact-type h3 {{
            color: #3498db;
            border-bottom: 1px solid #3498db;
            padding-bottom: 5px;
        }}
        .artifact-item {{
            background: #f8f9fa;
            padding: 10px;
            margin: 5px 0;
            border-radius: 3px;
            border-left: 3px solid #3498db;
        }}
        .tags {{
            margin-top: 5px;
        }}
        .tag {{
            background: #3498db;
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.8em;
            margin-right: 5px;
        }}
        .raw-output {{
            background: #f4f4f4;
            padding: 10px;
            border-radius: 3px;
            font-family: monospace;
            font-size: 0.9em;
            max-height: 300px;
            overflow-y: auto;
            margin: 10px 0;
        }}
        .collapsible {{
            cursor: pointer;
            padding: 10px;
            background: #f1f1f1;
            border: none;
            text-align: left;
            outline: none;
            font-size: 15px;
            width: 100%;
        }}
        .content {{
            padding: 0 18px;
            display: none;
            overflow: hidden;
            background-color: #f9f9f9;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 10px 0;
        }}
        th, td {{
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }}
        th {{
            background-color: #f2f2f2;
        }}
    </style>
    <script>
        function toggleContent(element) {{
            var content = element.nextElementSibling;
            if (content.style.display === "block") {{
                content.style.display = "none";
            }} else {{
                content.style.display = "block";
            }}
        }}
    </script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔍 Detective Joe v1.5</h1>
            <h2>Investigation Report</h2>
        </div>
        
        <div class="metadata">
            <h3>Investigation Details</h3>
            <table>
                <tr><td><strong>Type:</strong></td><td>{investigation_type}</td></tr>
                <tr><td><strong>Target:</strong></td><td>{target}</td></tr>
                <tr><td><strong>Category:</strong></td><td>{category}</td></tr>
                <tr><td><strong>Profile:</strong></td><td>{profile}</td></tr>
                <tr><td><strong>Date:</strong></td><td>{timestamp}</td></tr>
            </table>
        </div>
        
        {summary_section}
        
        {artifacts_summary_section}
        
        <h3>Plugin Execution Results</h3>
        {plugin_results_section}
        
        {artifacts_section}
        
        <div style="margin-top: 30px; text-align: center; color: #7f8c8d; font-style: italic;">
            Report generated by Detective Joe v1.5 - Next-Gen Recon Framework
        </div>
    </div>
</body>
</html>"""
    
    def _get_html_sections(self, context: Dict[str, Any]) -> Dict[str, str]:
        """Generate HTML sections."""
        sections = {}
        
        # Summary section
        summary = context['summary']
        sections['summary_section'] = f"""
        <div class="summary">
            <h3>Executive Summary</h3>
            <table>
                <tr><td><strong>Total Tasks:</strong></td><td>{summary.get('total_tasks', 0)}</td></tr>
                <tr><td><strong>Successful:</strong></td><td>{summary.get('successful_tasks', 0)}</td></tr>
                <tr><td><strong>Failed:</strong></td><td>{summary.get('failed_tasks', 0)}</td></tr>
                <tr><td><strong>Success Rate:</strong></td><td>{summary.get('success_rate', 0):.1f}%</td></tr>
                <tr><td><strong>Total Time:</strong></td><td>{summary.get('total_duration', 0):.2f} seconds</td></tr>
            </table>
        </div>
        """
        
        # Artifacts summary section
        artifacts_summary = context['artifacts_summary']
        if artifacts_summary:
            summary_rows = ""
            for artifact_type, count in artifacts_summary.items():
                summary_rows += f"<tr><td>{artifact_type.title()}</td><td>{count}</td></tr>"
            
            sections['artifacts_summary_section'] = f"""
            <div class="summary">
                <h3>Artifacts Summary</h3>
                <table>
                    <tr><th>Type</th><th>Count</th></tr>
                    {summary_rows}
                </table>
            </div>
            """
        else:
            sections['artifacts_summary_section'] = ""
        
        # Plugin results section
        plugin_results_html = ""
        for task_id, result in context['plugin_results'].items():
            status_class = result.get('status', 'unknown')
            plugin_name = result.get('plugin', 'Unknown')
            duration = result.get('duration', 0)
            
            plugin_html = f"""
            <div class="plugin-result {status_class}">
                <div class="plugin-header">[{plugin_name.upper()}] - Status: {result.get('status', 'Unknown').upper()}</div>
            """
            
            if result.get('status') == 'completed' and result.get('result'):
                plugin_result = result['result']
                
                if 'command' in plugin_result:
                    plugin_html += f'<div class="command">{html.escape(plugin_result["command"])}</div>'
                
                if 'parsed_data' in plugin_result:
                    plugin_html += '<button class="collapsible" onclick="toggleContent(this)">📊 Structured Data</button>'
                    plugin_html += '<div class="content">'
                    plugin_html += self._format_parsed_data_html(plugin_result['parsed_data'])
                    plugin_html += '</div>'
                
                if 'stdout' in plugin_result and plugin_result['stdout']:
                    plugin_html += '<button class="collapsible" onclick="toggleContent(this)">📝 Raw Output</button>'
                    plugin_html += '<div class="content">'
                    plugin_html += f'<div class="raw-output">{html.escape(plugin_result["stdout"][:5000])}'
                    if len(plugin_result['stdout']) > 5000:
                        plugin_html += '\n[OUTPUT TRUNCATED]'
                    plugin_html += '</div></div>'
            
            elif result.get('error'):
                plugin_html += f'<div style="color: #e74c3c;"><strong>Error:</strong> {html.escape(result["error"])}</div>'
            
            plugin_html += f'<div style="margin-top: 10px; color: #7f8c8d;"><small>Execution Time: {duration:.2f} seconds</small></div>'
            plugin_html += '</div>'
            
            plugin_results_html += plugin_html
        
        sections['plugin_results_section'] = plugin_results_html
        
        # Artifacts section
        artifacts = context['artifacts']
        if artifacts:
            sections['artifacts_section'] = f"""
            <div class="artifacts">
                <h3>Detailed Artifacts</h3>
                {self._format_artifacts_html(artifacts)}
            </div>
            """
        else:
            sections['artifacts_section'] = ""
        
        return sections
    
    def _format_parsed_data_html(self, parsed_data: Dict[str, Any]) -> str:
        """Format parsed data as HTML."""
        html_content = ""
        
        for key, value in parsed_data.items():
            if key == "summary":
                continue
            
            html_content += f"<h4>{key.title()}</h4>"
            
            if isinstance(value, list):
                if value:
                    html_content += "<ul>"
                    for item in value[:20]:
                        html_content += f"<li>{html.escape(str(item))}</li>"
                    if len(value) > 20:
                        html_content += f"<li><em>... and {len(value) - 20} more items</em></li>"
                    html_content += "</ul>"
                else:
                    html_content += "<p><em>(none found)</em></p>"
            elif isinstance(value, dict):
                html_content += "<ul>"
                for sub_key, sub_value in value.items():
                    html_content += f"<li><strong>{sub_key}:</strong> {html.escape(str(sub_value))}</li>"
                html_content += "</ul>"
            else:
                html_content += f"<p>{html.escape(str(value))}</p>"
        
        return html_content
    
    def _format_artifacts_html(self, artifacts: List[Any]) -> str:
        """Format artifacts as HTML."""
        # Group by type
        by_type = {}
        for artifact in artifacts:
            artifact_type = artifact.type if hasattr(artifact, 'type') else 'unknown'
            if artifact_type not in by_type:
                by_type[artifact_type] = []
            by_type[artifact_type].append(artifact)
        
        html_content = ""
        for artifact_type, type_artifacts in by_type.items():
            html_content += f"""
            <div class="artifact-type">
                <h3>{artifact_type.title()} ({len(type_artifacts)})</h3>
            """
            
            for artifact in type_artifacts[:20]:  # Limit display
                tags_html = "".join([f'<span class="tag">{tag}</span>' for tag in artifact.tags])
                
                html_content += f"""
                <div class="artifact-item">
                    <strong>{html.escape(artifact.value)}</strong><br>
                    <small>Source: {artifact.source_plugin} | Confidence: {artifact.confidence:.2f}</small>
                    <div class="tags">{tags_html}</div>
                </div>
                """
            
            if len(type_artifacts) > 20:
                html_content += f"<p><em>... and {len(type_artifacts) - 20} more {artifact_type} artifacts</em></p>"
            
            html_content += "</div>"
        
        return html_content
    
    def _summarize_artifacts(self, artifacts: List[Any]) -> Dict[str, int]:
        """Create artifact summary by type."""
        if not artifacts:
            return {}
        
        summary = {}
        for artifact in artifacts:
            artifact_type = artifact.type if hasattr(artifact, 'type') else 'unknown'
            summary[artifact_type] = summary.get(artifact_type, 0) + 1
        return summary


class JsonReportGenerator(ReportGenerator):
    """JSON report generator."""
    
    def generate(self, investigation_result: Dict[str, Any], artifacts: List[Any] = None) -> str:
        """Generate JSON report."""
        report_data = {
            "metadata": {
                "generator": "Detective Joe v1.5",
                "format_version": "1.0",
                "generated_at": datetime.now().isoformat()
            },
            "investigation": {
                "type": investigation_result.get('investigation_type'),
                "target": investigation_result.get('target'),
                "category": investigation_result.get('category'),
                "profile": investigation_result.get('profile'),
                "timestamp": investigation_result.get('timestamp')
            },
            "summary": investigation_result.get('summary', {}),
            "plugin_results": investigation_result.get('plugin_results', {}),
            "artifacts": {
                "count": len(artifacts) if artifacts else 0,
                "by_type": self._summarize_artifacts(artifacts) if artifacts else {},
                "items": [self._artifact_to_dict(artifact) for artifact in (artifacts or [])]
            }
        }
        
        return json.dumps(report_data, indent=2, default=str)
    
    def _artifact_to_dict(self, artifact: Any) -> Dict[str, Any]:
        """Convert artifact to dictionary."""
        if hasattr(artifact, 'to_dict'):
            return artifact.to_dict()
        else:
            return {
                "type": getattr(artifact, 'type', 'unknown'),
                "value": getattr(artifact, 'value', ''),
                "source": getattr(artifact, 'source_plugin', ''),
                "confidence": getattr(artifact, 'confidence', 0.0),
                "tags": getattr(artifact, 'tags', []),
                "metadata": getattr(artifact, 'metadata', {})
            }
    
    def _summarize_artifacts(self, artifacts: List[Any]) -> Dict[str, int]:
        """Create artifact summary by type."""
        if not artifacts:
            return {}
        
        summary = {}
        for artifact in artifacts:
            artifact_type = artifact.type if hasattr(artifact, 'type') else 'unknown'
            summary[artifact_type] = summary.get(artifact_type, 0) + 1
        return summary


class ReportManager:
    """Manages multiple report formats."""
    
    def __init__(self, reports_dir: Path):
        """Initialize report manager."""
        self.reports_dir = Path(reports_dir)
        self.txt_generator = TxtReportGenerator(reports_dir)
        self.html_generator = HtmlReportGenerator(reports_dir)
        self.json_generator = JsonReportGenerator(reports_dir)
        self.logger = logging.getLogger("dj.report_manager")
    
    def generate_all_reports(self, investigation_result: Dict[str, Any], artifacts: List[Any] = None) -> Dict[str, Path]:
        """
        Generate reports in all formats.
        
        Returns:
            Dictionary mapping format to file path
        """
        target = investigation_result.get('target', 'unknown')
        category = investigation_result.get('category')
        
        reports = {}
        
        try:
            # Generate TXT report
            txt_content = self.txt_generator.generate(investigation_result, artifacts)
            txt_filename = self.txt_generator.generate_filename(target, "txt", category)
            txt_path = self.reports_dir / txt_filename
            
            with open(txt_path, 'w', encoding='utf-8') as f:
                f.write(txt_content)
            reports['txt'] = txt_path
            
            # Generate HTML report
            html_content = self.html_generator.generate(investigation_result, artifacts)
            html_filename = self.html_generator.generate_filename(target, "html", category)
            html_path = self.reports_dir / html_filename
            
            with open(html_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            reports['html'] = html_path
            
            # Generate JSON report
            json_content = self.json_generator.generate(investigation_result, artifacts)
            json_filename = self.json_generator.generate_filename(target, "json", category)
            json_path = self.reports_dir / json_filename
            
            with open(json_path, 'w', encoding='utf-8') as f:
                f.write(json_content)
            reports['json'] = json_path
            
            self.logger.info(f"Generated reports: {list(reports.keys())}")
            
        except Exception as e:
            self.logger.error(f"Error generating reports: {e}")
        
        return reports